from PyQt5.QtWidgets import (
    QWidget, QComboBox, QTableWidget, QTableWidgetItem,
    QVBoxLayout, QPushButton, QPlainTextEdit, QMessageBox
)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QTextOption
from db import get_all_robots, update_robot, add_robot, delete_robot
from openpyxl import Workbook

# üîß –ö–∞—Å—Ç–æ–º–Ω—ã–π ComboBox, –æ—Ç–∫–ª—é—á–∞—é—â–∏–π –ø—Ä–æ–∫—Ä—É—Ç–∫—É –º—ã—à–∏
class NoScrollComboBox(QComboBox):
    def wheelEvent(self, event):
        event.ignore()  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–ª–µ—Å–æ –º—ã—à–∏, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ

# üß© –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
class RobotTable(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–£—á—ë—Ç —Ä–æ–±–æ—Ç–æ–≤ –û–¢–ö")
        self.resize(1000, 400)

        # üìä –¢–∞–±–ª–∏—Ü–∞ –∏ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.table = QTableWidget()
        self.add_button = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–æ–±–æ—Ç–∞")
        self.delete_button = QPushButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–æ–±–æ—Ç–∞")
        self.save_button = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        self.export_button = QPushButton("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
        self.refresh_button = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É")  # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        #############################################

        # üîó –ü—Ä–∏–≤—è–∑–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫ –º–µ—Ç–æ–¥–∞–º
        self.add_button.clicked.connect(self.add_robot)
        self.delete_button.clicked.connect(self.delete_robot)
        self.save_button.clicked.connect(self.save_changes)
        self.export_button.clicked.connect(self.export_to_excel)
        self.refresh_button.clicked.connect(self.load_data)
        ##############################################

        # –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ
        button_layout = QHBoxLayout()
        button_layout.addWidget(self.add_button)
        button_layout.addWidget(self.delete_button)
        button_layout.addWidget(self.save_button)
        button_layout.addWidget(self.export_button)
        button_layout.addWidget(self.refresh_button)

        main_layout = QVBoxLayout()
        main_layout.addWidget(self.table)
        main_layout.addLayout(button_layout)

        self.setLayout(main_layout)
        ################################################


        # üè∑Ô∏è –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –≤ –±–∞–∑–µ
        self.headers = [
            "–ú–æ–¥–µ–ª—å", "–°–µ—Ä–∏–π–Ω—ã–π ‚Ññ —Ä–æ–±–æ—Ç–∞", "–°–µ—Ä–∏–π–Ω—ã–π ‚Ññ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞",
            "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏",
            "–ü—Ä–æ–±–ª–µ–º–Ω—ã–π —É–∑–µ–ª/–º–æ–¥—É–ª—å", "–ü—Ä–∏—á–∏–Ω–∞ –ø–æ–ª–æ–º–∫–∏", "–ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
            "–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —Ä–∞–±–æ—Ç—ã", "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏"
        ]
        self.db_fields = [
            "model", "robot_sn", "controller_sn",
            "status", "fault_description",
            "fault_module", "fault_reason", "tasks_done",
            "tasks_required", "required_parts"
        ]
        self.field_map = {i: field for i, field in enumerate(self.db_fields)}  # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ –ø–æ–ª–µ–π
        self.load_data()  # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

    # üîß –°–æ–∑–¥–∞–Ω–∏–µ —è—á–µ–π–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –º–æ–¥–µ–ª–∏
    def create_model_cell(self, value):
        combo = NoScrollComboBox()
        combo.addItems(["RC3", "RC5", "RC10", "-"])
        combo.setCurrentText(str(value))
        return combo

    # üîß –°–æ–∑–¥–∞–Ω–∏–µ —è—á–µ–π–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç–∞—Ç—É—Å–∞
    def create_status_cell(self, value):
        combo = NoScrollComboBox()
        combo.addItems(["–ù–µ–æ–±—Ö–æ–¥–∏–º —Ä–µ–º–æ–Ω—Ç", "–¢–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è", "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω", "–û—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω", "–£–ø–∞–∫–æ–≤–∞–Ω", "-"])
        combo.setCurrentText(str(value))
        return combo

    # üîß –°–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–π —Ç–µ–∫—Å—Ç–æ–≤–æ–π —è—á–µ–π–∫–∏
    def create_multiline_cell(self, value):
        editor = QPlainTextEdit()
        editor.setPlainText(str(value))
        editor.setMaximumHeight(50)
        editor.setLineWrapMode(QPlainTextEdit.WidgetWidth)
        editor.setWordWrapMode(QTextOption.WordWrap)
        return editor

    # üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
    def load_data(self):
        self.table.blockSignals(True)  # –û—Ç–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
        robots = get_all_robots()
        robots.sort(key=lambda x: x['id'])  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ ID

        self.table.setColumnCount(len(self.headers))
        self.table.setHorizontalHeaderLabels(self.headers)
        self.table.setRowCount(len(robots))

        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        for row_idx, robot in enumerate(robots):
            for col_idx, field in enumerate(self.db_fields):
                value = robot.get(field, "")
                if field == "model":
                    self.table.setCellWidget(row_idx, col_idx, self.create_model_cell(value))
                elif field == "status":
                    self.table.setCellWidget(row_idx, col_idx, self.create_status_cell(value))
                else:
                    self.table.setCellWidget(row_idx, col_idx, self.create_multiline_cell(value))

        self.table.setWordWrap(True)
        self.table.resizeColumnsToContents()
        self.table.resizeRowsToContents()
        self.table.blockSignals(False)  # –í–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –æ–±—Ä–∞—Ç–Ω–æ

    # ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞
    def add_robot(self):
        add_robot()  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î
        self.load_data()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü—ã

    # üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–æ–±–æ—Ç–∞
    def delete_robot(self):
        selected = self.table.currentRow()
        if selected < 0:
            return  # –ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ
        robot_id = get_all_robots()[selected]['id']
        reply = QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
                                     f"–£–¥–∞–ª–∏—Ç—å —Ä–æ–±–æ—Ç–∞ —Å ID {robot_id}?",
                                     QMessageBox.Yes | QMessageBox.No)
        if reply == QMessageBox.Yes:
            delete_robot(robot_id)
            self.load_data()

    # üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    def save_changes(self):
        reply = QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                     "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è?",
                                     QMessageBox.Yes | QMessageBox.No)
        if reply != QMessageBox.Yes:
            return
        robots = get_all_robots()
        for row in range(self.table.rowCount()):
            robot_id = robots[row]['id']
            for col in range(self.table.columnCount()):
                field = self.db_fields[col]
                widget = self.table.cellWidget(row, col)
                # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –≤–∏–¥–∂–µ—Ç–∞
                if isinstance(widget, QComboBox):
                    value = widget.currentText()
                elif isinstance(widget, QPlainTextEdit):
                    value = widget.toPlainText()
                else:
                    continue
                update_robot(robot_id, field, value)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
        QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        self.load_data()

    # üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel
    def export_to_excel(self):
        wb = Workbook()
        ws = wb.active
        ws.title = "–†–æ–±–æ—Ç—ã –û–¢–ö"
        ws.append(self.headers)  # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        robots = get_all_robots()
        for row_idx, robot in enumerate(robots):
            row_data = []
            for field in self.db_fields:
                row_data.append(robot.get(field, ""))
            ws.append(row_data)
        wb.save("robots_export.xlsx")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ robots_export.xlsx")
