from PyQt5.QtWidgets import (
    QWidget, QComboBox, QTableWidget, QVBoxLayout, QPushButton,
    QPlainTextEdit, QMessageBox, QHBoxLayout, QLineEdit, QLabel
)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QTextOption, QPalette, QColor
from db import get_all_robots, update_robot, add_robot, delete_robot
from openpyxl import Workbook

# üîß –ö–∞—Å—Ç–æ–º–Ω—ã–π ComboBox, –æ—Ç–∫–ª—é—á–∞—é—â–∏–π –ø—Ä–æ–∫—Ä—É—Ç–∫—É –º—ã—à–∏
class NoScrollComboBox(QComboBox):
    def wheelEvent(self, event):
        event.ignore()

# üß© –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
class RobotTable(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–£—á—ë—Ç —Ä–æ–±–æ—Ç–æ–≤ –û–¢–ö")
        self.resize(1000, 400)

        # üè∑Ô∏è –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –∏ –ø–æ–ª—è –ë–î
        self.headers = [
            "–ú–æ–¥–µ–ª—å", "–°–µ—Ä–∏–π–Ω—ã–π ‚Ññ —Ä–æ–±–æ—Ç–∞", "–°–µ—Ä–∏–π–Ω—ã–π ‚Ññ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞",
            "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏",
            "–ü—Ä–æ–±–ª–µ–º–Ω—ã–π —É–∑–µ–ª/–º–æ–¥—É–ª—å", "–ü—Ä–∏—á–∏–Ω–∞ –ø–æ–ª–æ–º–∫–∏", "–ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
            "–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —Ä–∞–±–æ—Ç—ã", "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏"
        ]
        self.db_fields = [
            "model", "robot_sn", "controller_sn",
            "status", "fault_description",
            "fault_module", "fault_reason", "tasks_done",
            "tasks_required", "required_parts"
        ]
        self.field_map = {i: field for i, field in enumerate(self.db_fields)}

        # üîç –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        self.search_label = QLabel("–ü–æ–∏—Å–∫:")
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç...")
        self.search_input.textChanged.connect(self.filter_table)

        search_layout = QHBoxLayout()
        search_layout.addStretch()
        search_layout.addWidget(self.search_label)
        search_layout.addWidget(self.search_input)

        # üìä –¢–∞–±–ª–∏—Ü–∞
        self.table = QTableWidget()

        # üîò –ö–Ω–æ–ø–∫–∏
        self.add_button = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–æ–±–æ—Ç–∞")
        self.delete_button = QPushButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–æ–±–æ—Ç–∞")
        self.save_button = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        self.export_button = QPushButton("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
        self.refresh_button = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É")

        # üîó –ü—Ä–∏–≤—è–∑–∫–∞ –∫–Ω–æ–ø–æ–∫
        self.add_button.clicked.connect(self.add_robot)
        self.delete_button.clicked.connect(self.delete_robot)
        self.save_button.clicked.connect(self.save_changes)
        self.export_button.clicked.connect(self.export_to_excel)
        self.refresh_button.clicked.connect(self.load_data)

        button_layout = QHBoxLayout()
        button_layout.addWidget(self.add_button)
        button_layout.addWidget(self.delete_button)
        button_layout.addWidget(self.save_button)
        button_layout.addWidget(self.export_button)
        button_layout.addWidget(self.refresh_button)

        # üìê –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout()
        main_layout.addLayout(search_layout)
        main_layout.addWidget(self.table)
        main_layout.addLayout(button_layout)

        self.setLayout(main_layout)
        self.load_data()

    # üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–æ —Ç–µ–∫—Å—Ç—É
    def filter_table(self):
        query = self.search_input.text().lower()
        for row in range(self.table.rowCount()):
            match = False
            for col in range(self.table.columnCount()):
                widget = self.table.cellWidget(row, col)
                if isinstance(widget, QComboBox):
                    text = widget.currentText().lower()
                elif isinstance(widget, QPlainTextEdit):
                    text = widget.toPlainText().lower()
                else:
                    continue
                if query in text:
                    match = True
                    break
            self.table.setRowHidden(row, not match)

    def create_model_cell(self, value):
        combo = NoScrollComboBox()
        combo.addItems(["RC3", "RC5", "RC10", "-"])
        combo.setCurrentText(str(value))
        return combo

    def create_status_cell(self, value):
        combo = NoScrollComboBox()
        combo.setEditable(True)
        statuses = ["–ù–µ–æ–±—Ö–æ–¥–∏–º —Ä–µ–º–æ–Ω—Ç", "–¢–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è", "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω", "–û—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω", "–£–ø–∞–∫–æ–≤–∞–Ω", "-"]
        combo.addItems(statuses)
        combo.setCurrentText(str(value))
        self.update_status_color(combo, value)
        combo.currentTextChanged.connect(lambda text: self.update_status_color(combo, text))

         # üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –ø–æ —Å–∞–º–æ–º—É –¥–ª–∏–Ω–Ω–æ–º—É —Å—Ç–∞—Ç—É—Å—É
        max_width = max([combo.fontMetrics().width(s) for s in statuses]) + 30
        combo.setMinimumWidth(max_width)

        return combo

    def update_status_color(self, combo, status):
        color_map = {
            "–ù–µ–æ–±—Ö–æ–¥–∏–º —Ä–µ–º–æ–Ω—Ç": QColor("#ffcccc"),     # —Å–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π
            "–û—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω": QColor("#ccffcc"),         # —Å–≤–µ—Ç–ª–æ-–∑–µ–ª—ë–Ω—ã–π
            "–¢–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è": QColor("#ffffcc"),          # —Å–≤–µ—Ç–ª–æ-–∂—ë–ª—Ç—ã–π
            "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω": QColor("#ccffff"),        # —Å–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π
            "–£–ø–∞–∫–æ–≤–∞–Ω": QColor("#e0e0e0"),             # —Å–µ—Ä—ã–π
            "-": QColor("#ffffff")                     # –±–µ–ª—ã–π
        }

        color = color_map.get(status, QColor("#ffffff"))
        palette = combo.palette()
        palette.setColor(QPalette.Base, color)
        combo.setPalette(palette)

    def create_multiline_cell(self, value):
        editor = QPlainTextEdit()
        editor.setPlainText(str(value))
        editor.setMaximumHeight(50)
        editor.setLineWrapMode(QPlainTextEdit.WidgetWidth)
        editor.setWordWrapMode(QTextOption.WordWrap)
        return editor

    def load_data(self):
        self.table.blockSignals(True)
        robots = get_all_robots()
        robots.sort(key=lambda x: x['id'])

        self.table.setColumnCount(len(self.headers))
        self.table.setHorizontalHeaderLabels(self.headers)
        self.table.setRowCount(len(robots))

        for row_idx, robot in enumerate(robots):
            for col_idx, field in enumerate(self.db_fields):
                value = robot.get(field, "")
                if field == "model":
                    self.table.setCellWidget(row_idx, col_idx, self.create_model_cell(value))
                elif field == "status":
                    self.table.setCellWidget(row_idx, col_idx, self.create_status_cell(value))
                else:
                    self.table.setCellWidget(row_idx, col_idx, self.create_multiline_cell(value))

        self.table.setWordWrap(True)
        self.table.resizeColumnsToContents()
        self.table.resizeRowsToContents()
        self.table.blockSignals(False)

        # –ü–æ—Å–ª–µ self.table.setRowCount(len(robots))
        status_column_index = self.db_fields.index("status")
        self.table.setColumnWidth(status_column_index, 160)  # –∏–ª–∏ max_width, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏


    def add_robot(self):
        reply = QMessageBox.question(self, "–ù–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            "–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞?",
            QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel)

        if reply == QMessageBox.Cancel:
            return
        elif reply == QMessageBox.Yes:
            self.save_changes()

        add_robot()
        self.load_data()

    def delete_robot(self):
        selected = self.table.currentRow()
        if selected < 0:
            return
        robot_id = get_all_robots()[selected]['id']
        reply = QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
                                     f"–£–¥–∞–ª–∏—Ç—å —Ä–æ–±–æ—Ç–∞ —Å ID {robot_id}?",
                                     QMessageBox.Yes | QMessageBox.No)
        if reply == QMessageBox.Yes:
            delete_robot(robot_id)
            self.load_data()

    def save_changes(self):
        reply = QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                     "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è?",
                                     QMessageBox.Yes | QMessageBox.No)
        if reply != QMessageBox.Yes:
            return
        robots = get_all_robots()
        for row in range(self.table.rowCount()):
            robot_id = robots[row]['id']
            for col in range(self.table.columnCount()):
                field = self.db_fields[col]
                widget = self.table.cellWidget(row, col)
                if isinstance(widget, QComboBox):
                    value = widget.currentText()
                elif isinstance(widget, QPlainTextEdit):
                    value = widget.toPlainText()
                else:
                    continue
                update_robot(robot_id, field, value)
        QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        self.load_data()

    def export_to_excel(self):
        wb = Workbook()
        ws = wb.active
        ws.title = "–†–æ–±–æ—Ç—ã –û–¢–ö"
        ws.append(self.headers)
        robots = get_all_robots()
        for robot in robots:
            row_data = [robot.get(field, "") for field in self.db_fields]
            ws.append(row_data)
        wb.save("robots_export.xlsx")
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ robots_export.xlsx")
